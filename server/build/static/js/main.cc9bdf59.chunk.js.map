{"version":3,"sources":["components/AddVerb.js","scenes/Home/Index.js","utils/service.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["AddVerb","addVerb","useState","verb","setVerb","translation","setTranslation","className","onSubmit","e","type","placeholder","name","value","onChange","target","required","service","payload","post","getVerbs","get","this","baseURL","process","axios","create","Index","props","verbs","setVerbs","tense","setTense","tab","setTab","useEffect","a","data","fetchData","preventDefault","concat","showVerbs","filter","map","v","yo","tu","el","nosotros","vosotros","ellos","onClick","to","Footer","rel","href","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc9bdf59.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function AddVerb({ addVerb }) {\n  const [verb, setVerb] = useState(\"\");\n  const [translation, setTranslation] = useState(\"\");\n\n  return (\n    <div className=\"row\">\n      <div className=\"col s12\">\n        <div className=\"row\">\n          <form onSubmit={e => addVerb(e, { verb, translation })}>\n            <div className=\"input-field col s12\">\n              <input\n                type=\"text\"\n                placeholder=\"El verbo\"\n                name=\"verb\"\n                value={verb}\n                onChange={e => setVerb(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"input-field col s12\">\n              <input\n                type=\"text\"\n                placeholder=\"El traduccion\"\n                name=\"translation\"\n                value={translation}\n                onChange={e => setTranslation(e.target.value)}\n                required\n              />\n            </div>\n            <button className=\"btn\" type=\"submit\">\n              Agregar un verbo\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n    // <form onSubmit={e => addVerb(e, { verb, translation })}>\n    //   <input\n    //     type=\"text\"\n    //     placeholder=\"Werkwoord\"\n    //     name=\"verb\"\n    //     value={verb}\n    //     onChange={e => setVerb(e.target.value)}\n    //     required\n    //   />\n    //   <input\n    //     type=\"text\"\n    //     name=\"translation\"\n    //     value={translation}\n    //     onChange={e => setTranslation(e.target.value)}\n    //     required\n    //   />\n    //   <button className=\"btn\" type=\"submit\">\n    //     Agregar un verbo\n    //   </button>\n    // </form>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport AddVerb from \"../../components/AddVerb\";\nimport { Service } from \"../../utils/service\";\nimport { Link, Route } from \"react-router-dom\";\nconst service = new Service();\n\nexport default function Index(props) {\n  const [verbs, setVerbs] = useState([]);\n  const [tense, setTense] = useState(\"present\");\n  const [tab, setTab] = useState(1);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await service.getVerbs();\n      setVerbs(data);\n    };\n    fetchData();\n  }, []);\n\n  const addVerb = async (e, payload) => {\n    e.preventDefault();\n    const { data } = await service.addVerb(payload);\n    debugger;\n    setVerbs(verbs.concat(data));\n  };\n  const showVerbs = () => {\n    return verbs\n      .filter(verb => verb.tense === tense)\n      .map(v => {\n        const { verb, translation, yo, tu, el, nosotros, vosotros, ellos } = v;\n        return (\n          <tr>\n            <td>{verb}</td>\n            <td>{translation}</td>\n            <td>{yo}</td>\n            <td>{tu}</td>\n            <td>{el}</td>\n            <td>{nosotros}</td>\n            <td>{vosotros}</td>\n            <td>{ellos}</td>\n          </tr>\n        );\n      });\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        <AddVerb addVerb={addVerb} />\n        <div className=\"row\">\n          <div className=\"col s12\">\n            <ul className=\"tabs\">\n              <li\n                onClick={() => setTab(1)}\n                className={`tab col s6 ${tab === 1 ? \"active\" : \"\"}`}\n              >\n                <Link onClick={() => setTense(\"present\")} to=\"present\">\n                  El Presente\n                </Link>\n              </li>\n              <li\n                onClick={() => setTab(2)}\n                className={`tab col s6 ${tab === 2 ? \"active\" : \"\"}`}\n              >\n                <Link onClick={() => setTense(\"past\")} to=\"past\">\n                  El Pretérito\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div className=\"col s12\">\n            {tab === 1 && (\n              <table className=\"highlight\">\n                <tr>\n                  <th>El verbo</th>\n                  <th>Traduccion</th>\n                  <th>Yo</th>\n                  <th>Tú</th>\n                  <th>Él / Ella </th>\n                  <th>Nosotros </th>\n                  <th>Vosotros</th>\n                  <th>Ellos / Ellas / Ustedes</th>\n                </tr>\n                {showVerbs()}\n              </table>\n            )}\n          </div>\n          <div className=\"col s12\">\n            {tab === 2 && (\n              <table className=\"highlight\">\n                <tr>\n                  <th>El verbo</th>\n                  <th>Traduccion</th>\n                  <th>Yo</th>\n                  <th>Tú</th>\n                  <th>Él / Ella </th>\n                  <th>Nosotros </th>\n                  <th>Vosotros</th>\n                  <th>Ellos / Ellas / Ustedes</th>\n                </tr>\n                {showVerbs()}\n              </table>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import axios from \"axios\";\n\nexport class Service {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_BASE_URL;\n    this.service = axios.create({\n      baseURL: this.baseURL\n    });\n  }\n\n  addVerb = payload => {\n    return this.service.post(\"/verb\", payload);\n  };\n\n  getVerbs = () => {\n    debugger;\n    return this.service.get(\"/verb\");\n  };\n}\n","import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"page-footer\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col l6 s12\">\n            {/* <h5 className=\"white-text\">Bronnen</h5>\n            <p className=\"grey-text text-lighten-4\">\n              You can use rows and columns here to organize your footer content.\n            </p> */}\n          </div>\n          <div className=\"col l4 offset-l2 s12\">\n            <h5 className=\"white-text\">Bronnen</h5>\n            <ul>\n              <li>\n                <a\n                  className=\"grey-text text-lighten-3\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://www.enforex.com/spaans/taal/spaanse-verleden-onvoltooide-tijd.html\"\n                >\n                  Verleden en onvoltooide tijd\n                </a>\n              </li>\n              <li>\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"grey-text text-lighten-3\"\n                  href=\"https://www.fluentin3months.com/spanish-verb-conjugation/\"\n                >\n                  Verleden tijd\n                </a>\n              </li>\n              <li>\n                <a className=\"grey-text text-lighten-3\" href=\"#!\">\n                  Link 3\n                </a>\n              </li>\n              <li>\n                <a className=\"grey-text text-lighten-3\" href=\"#!\">\n                  Link 4\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div className=\"footer-copyright\">\n        <div className=\"container\">\n          © 2019 De Gijs Lebesque\n          <a\n            className=\"grey-text text-lighten-4 right\"\n            href=\"https://github.com/gijslebesque\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Github\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Index from \"./scenes/Home/Index\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Verblizador</h1>\n      <main>\n        <Switch>\n          <Route path=\"/\">\n            <Index />\n          </Route>\n        </Switch>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}